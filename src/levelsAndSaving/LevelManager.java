package levelsAndSaving;

import entity.Player;
import main.GamePanel;

public class LevelManager {
	private static final int LEVELS_NUMBER = 2;
	private GamePanel gp;
	private int currentLevelID;
	private Level[] levels;
	private boolean inside;
	
	public LevelManager(GamePanel gp) {
		this.gp = gp;
		currentLevelID = 0; 
		levels = new Level[LEVELS_NUMBER];
		updateInside();
		loadLevels();
	}
	
	private void updateInside() {
		inside = (currentLevelID == 0);
	}

	private void loadLevels() {
		
		int[][]houseTileMatrix = 
		{ {2,2,2,2,2,2,2,2,2}
		, {2,0,0,0,0,0,0,0,2}
		, {2,0,0,0,0,0,0,0,2}
		, {2,0,0,0,0,0,0,0,2}
		, {2,0,0,0,0,0,0,0,2}
		, {2,2,2,2,0,2,2,2,2}
		};
		
		int[][]houseObjectMatrix = 
		{ {0,0,0,0,0,0,0,0,0}
		, {0,0,0,0,0,0,0,0,0}
		, {0,0,0,0,0,0,0,0,0}
		, {0,0,0,0,0,0,0,0,0}
		, {0,0,0,0,4,0,0,0,0}
		, {0,0,0,0,1,0,0,0,0}
		};
		
		levels[0] = new Level(gp,houseTileMatrix,houseObjectMatrix);
		
		int[][] tileMatrix0 = 
			{ {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2} 
			, {2,4,4,4,4,4,4,4,2,3,0,0,2,4,4,4,4,4,4,4,2} 
			, {2,4,4,4,4,4,4,4,2,0,0,0,2,4,4,4,4,4,4,4,2} 
			, {2,4,4,4,4,4,4,4,2,2,0,2,2,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2} 
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2} 
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2} 
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,4,4,4,4,1,0,1,4,4,4,4,4,4,4,4,2}
			, {2,4,4,4,4,1,1,1,1,1,0,1,1,1,1,1,4,4,4,4,2}
			, {2,4,4,4,4,1,0,0,0,0,0,0,0,0,0,1,4,4,4,4,2}
			, {2,4,4,4,4,1,0,0,0,0,0,0,0,0,0,1,4,4,4,4,2}
			, {2,4,4,4,4,1,0,0,0,0,0,0,0,0,0,1,4,4,4,4,2}
			, {2,4,4,4,4,1,1,1,1,1,0,1,1,1,1,1,4,4,4,4,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			, {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
			}; 
		
		int[][] objectMatrix0 =
			{ {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0}
			, {0,0,0,0,0,0,2,2,2,2,3,2,2,2,2,0,0,0,0,0,0}
			, {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
		
		levels[1] = new Level(gp,tileMatrix0, objectMatrix0);
		 
		
	}

	public Level getCurrentLevel() {
	    if(currentLevelID < 0 || currentLevelID >= levels.length) {
	        throw new IllegalStateException("Invalid level ID: " + currentLevelID);
	    }
	    return levels[currentLevelID];
	}
	
	private void getOut() {
		setCurrentLevelID(1);
		getCurrentLevel().increaseInitialY();
		gp.getPlayer().updateXY();
		getCurrentLevel().resetXY();
		updateInside();
		
	}
	
	private void getInside() {
	    setCurrentLevelID(0);
	    
	    // Clamp player position to house boundaries
	    Player player = gp.getPlayer();
	    getCurrentLevel().increaseInitialY();
	    player.updateXY();
	    getCurrentLevel().resetXY();
	    updateInside();
	}
	
	public int getCurrentLevelID() {
		return currentLevelID;
	}
	
	public boolean isInside() {
		return inside;
	}

	public void doorMovement() {
		updateInside();
		if(inside) {
			getOut();
		}else {
			getInside();
		}
	}

	public void setCurrentLevelID(int currentLevelID) {
		this.currentLevelID = currentLevelID;
		updateInside();
		gp.updateCurrentLevel();
	}
}
